{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ninaddemoadf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/sqltodatalake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"description": "",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lastload",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "latestload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM dbo.FactBookings\nWHERE booking_date > '@{activity('lastload').output.firstRow.lastload}' \nAND\nbooking_date < '@{activity('latestload').output.firstRow.latestload}' \n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "lastload",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json2",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "latestload",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT MAX(\"booking_date\") AS LatestLoad FROM [dbo].[FactBookings] ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Watermark",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "lastload",
										"value": {
											"value": "@activity('latestload').output.firstRow.latestload",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "emptyjson",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Json2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-08T22:58:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "on_prem_files",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "DimAirline.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "airline_id",
						"type": "String"
					},
					{
						"name": "airline_name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_onprem_para')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "on_prem_files",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().p_filename",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_DimAirline",
								"type": "DatasetReference"
							},
							"name": "DimAirline"
						},
						{
							"dataset": {
								"referenceName": "ds_DimFlight",
								"type": "DatasetReference"
							},
							"name": "DimFilght"
						},
						{
							"dataset": {
								"referenceName": "ds_DimPassenger",
								"type": "DatasetReference"
							},
							"name": "DimPassenger"
						},
						{
							"dataset": {
								"referenceName": "ds_DimAirport",
								"type": "DatasetReference"
							},
							"name": "DimAirport"
						},
						{
							"dataset": {
								"referenceName": "ds_DimBooking",
								"type": "DatasetReference"
							},
							"name": "FactBooking"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "adls",
								"type": "LinkedServiceReference"
							},
							"name": "sinkDimAirline"
						},
						{
							"linkedService": {
								"referenceName": "adls",
								"type": "LinkedServiceReference"
							},
							"name": "sinkDimFlight"
						},
						{
							"linkedService": {
								"referenceName": "adls",
								"type": "LinkedServiceReference"
							},
							"name": "sinkDimPassenger"
						},
						{
							"linkedService": {
								"referenceName": "adls",
								"type": "LinkedServiceReference"
							},
							"name": "sinkDimAirport"
						},
						{
							"linkedService": {
								"referenceName": "adls",
								"type": "LinkedServiceReference"
							},
							"name": "sinkFactBooking"
						}
					],
					"transformations": [
						{
							"name": "UpperCountry"
						},
						{
							"name": "SelectCol"
						},
						{
							"name": "DerivedGenderMale"
						},
						{
							"name": "DerivedGenderFemale"
						},
						{
							"name": "select1"
						},
						{
							"name": "AgeGreater25"
						},
						{
							"name": "FirstName"
						},
						{
							"name": "castCost"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "alterRow3"
						},
						{
							"name": "alterRow4"
						},
						{
							"name": "alterRow5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          airline_id as short,",
						"          airline_name as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimAirline",
						"source(output(",
						"          flight_id as short,",
						"          flight_number as string,",
						"          departure_time as string,",
						"          arrival_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimFilght",
						"source(output(",
						"          passenger_id as short,",
						"          full_name as string,",
						"          gender as string,",
						"          age as short,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimPassenger",
						"source(output(",
						"          airport_id as integer,",
						"          airport_name as string,",
						"          city as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> DimAirport",
						"source(output(",
						"          booking_id as integer,",
						"          passenger_id as integer,",
						"          flight_id as integer,",
						"          airline_id as integer,",
						"          origin_airport_id as integer,",
						"          destination_airport_id as integer,",
						"          booking_date as date,",
						"          ticket_cost as decimal(10,2),",
						"          flight_duration_mins as integer,",
						"          checkin_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> FactBooking",
						"DimAirline derive(country = upper(country)) ~> UpperCountry",
						"DimFilght select(mapColumn(",
						"          flight_id,",
						"          flight_number,",
						"          departure_timestamp = departure_time,",
						"          arrival_timestamp = arrival_time",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCol",
						"select1 derive(genderflag = regexReplace(genderflag, \"M\", \"Male\")) ~> DerivedGenderMale",
						"DerivedGenderMale derive(genderflag = regexReplace(genderflag, \"F\", \"Female\")) ~> DerivedGenderFemale",
						"DimPassenger select(mapColumn(",
						"          passenger_id,",
						"          full_name,",
						"          genderflag = gender,",
						"          age,",
						"          country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"DerivedGenderFemale filter(age>25) ~> AgeGreater25",
						"AgeGreater25 derive(first_name = split(full_name, \" \")[1]) ~> FirstName",
						"FactBooking cast(output(",
						"          ticket_cost as integer",
						"     ),",
						"     errors: true) ~> castCost",
						"DimAirport derive(airport_name = lower(airport_name)) ~> derivedColumn1",
						"UpperCountry alterRow(upsertIf(1>0)) ~> alterRow1",
						"SelectCol alterRow(upsertIf(1>0)) ~> alterRow2",
						"FirstName alterRow(upsertIf(1>0)) ~> alterRow3",
						"derivedColumn1 alterRow(upsertIf(1>0)) ~> alterRow4",
						"castCost alterRow(upsertIf(1>0)) ~> alterRow5",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimAirline',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['airline_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkDimAirline",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimFilght',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['flight_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkDimFlight",
						"alterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimPassenger',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['passenger_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkDimPassenger",
						"alterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimAirport',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['airport_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkDimAirport",
						"alterRow5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'FactBooking',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['booking_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkFactBooking"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SilverLayer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Silver Layer Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataTransformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DimAirline": {},
									"DimFilght": {},
									"DimPassenger": {},
									"DimAirport": {},
									"FactBooking": {},
									"sinkDimAirline": {},
									"sinkDimFlight": {},
									"sinkDimPassenger": {},
									"sinkDimAirport": {},
									"sinkFactBooking": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-13T14:59:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataTransformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onprem_ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "file_name",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.files",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "migrateonpremfiles",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dim_onprem_para",
											"type": "DatasetReference",
											"parameters": {
												"p_filename": {
													"value": "@item().file_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "onpremsink_csv",
											"type": "DatasetReference",
											"parameters": {
												"p_filename": {
													"value": "@item().file_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"files": {
						"type": "array",
						"defaultValue": [
							{
								"file_name": "DimPassenger.csv"
							},
							{
								"file_name": "DimAirline.csv"
							},
							{
								"file_name": "DimFlight.csv"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-09T19:59:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dim_onprem_para')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parent Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "onprem_inguestion",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "onprem_ingestion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"files": {
									"value": "@pipeline().parameters.files",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "api_inguestion",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "onprem_inguestion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "api_ingustion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "sqltodatalake",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "api_inguestion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "sqltodatalake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"files": {
						"type": "array",
						"defaultValue": [
							{
								"file_name": "DimPassenger.csv"
							},
							{
								"file_name": "DimAirline.csv"
							},
							{
								"file_name": "DimFlight.csv"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-09T20:01:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/onprem_ingestion')]",
				"[concat(variables('factoryId'), '/pipelines/sqltodatalake')]"
			]
		}
	]
}