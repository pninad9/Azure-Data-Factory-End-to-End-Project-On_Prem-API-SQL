{
	"name": "DataTransformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_DimAirline",
						"type": "DatasetReference"
					},
					"name": "DimAirline"
				},
				{
					"dataset": {
						"referenceName": "ds_DimFlight",
						"type": "DatasetReference"
					},
					"name": "DimFilght"
				},
				{
					"dataset": {
						"referenceName": "ds_DimPassenger",
						"type": "DatasetReference"
					},
					"name": "DimPassenger"
				},
				{
					"dataset": {
						"referenceName": "ds_DimAirport",
						"type": "DatasetReference"
					},
					"name": "DimAirport"
				},
				{
					"dataset": {
						"referenceName": "ds_DimBooking",
						"type": "DatasetReference"
					},
					"name": "FactBooking"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "adls",
						"type": "LinkedServiceReference"
					},
					"name": "sinkDimAirline"
				},
				{
					"linkedService": {
						"referenceName": "adls",
						"type": "LinkedServiceReference"
					},
					"name": "sinkDimFlight"
				},
				{
					"linkedService": {
						"referenceName": "adls",
						"type": "LinkedServiceReference"
					},
					"name": "sinkDimPassenger"
				},
				{
					"linkedService": {
						"referenceName": "adls",
						"type": "LinkedServiceReference"
					},
					"name": "sinkDimAirport"
				},
				{
					"linkedService": {
						"referenceName": "adls",
						"type": "LinkedServiceReference"
					},
					"name": "sinkFactBooking"
				}
			],
			"transformations": [
				{
					"name": "UpperCountry"
				},
				{
					"name": "SelectCol"
				},
				{
					"name": "DerivedGenderMale"
				},
				{
					"name": "DerivedGenderFemale"
				},
				{
					"name": "select1"
				},
				{
					"name": "AgeGreater25"
				},
				{
					"name": "FirstName"
				},
				{
					"name": "castCost"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "alterRow3"
				},
				{
					"name": "alterRow4"
				},
				{
					"name": "alterRow5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          airline_id as short,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimAirline",
				"source(output(",
				"          flight_id as short,",
				"          flight_number as string,",
				"          departure_time as string,",
				"          arrival_time as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimFilght",
				"source(output(",
				"          passenger_id as short,",
				"          full_name as string,",
				"          gender as string,",
				"          age as short,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimPassenger",
				"source(output(",
				"          airport_id as integer,",
				"          airport_name as string,",
				"          city as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'singleDocument') ~> DimAirport",
				"source(output(",
				"          booking_id as integer,",
				"          passenger_id as integer,",
				"          flight_id as integer,",
				"          airline_id as integer,",
				"          origin_airport_id as integer,",
				"          destination_airport_id as integer,",
				"          booking_date as date,",
				"          ticket_cost as decimal(10,2),",
				"          flight_duration_mins as integer,",
				"          checkin_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> FactBooking",
				"DimAirline derive(country = upper(country)) ~> UpperCountry",
				"DimFilght select(mapColumn(",
				"          flight_id,",
				"          flight_number,",
				"          departure_timestamp = departure_time,",
				"          arrival_timestamp = arrival_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCol",
				"select1 derive(genderflag = regexReplace(genderflag, \"M\", \"Male\")) ~> DerivedGenderMale",
				"DerivedGenderMale derive(genderflag = regexReplace(genderflag, \"F\", \"Female\")) ~> DerivedGenderFemale",
				"DimPassenger select(mapColumn(",
				"          passenger_id,",
				"          full_name,",
				"          genderflag = gender,",
				"          age,",
				"          country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"DerivedGenderFemale filter(age>25) ~> AgeGreater25",
				"AgeGreater25 derive(first_name = split(full_name, \" \")[1]) ~> FirstName",
				"FactBooking cast(output(",
				"          ticket_cost as integer",
				"     ),",
				"     errors: true) ~> castCost",
				"DimAirport derive(airport_name = lower(airport_name)) ~> derivedColumn1",
				"UpperCountry alterRow(upsertIf(1>0)) ~> alterRow1",
				"SelectCol alterRow(upsertIf(1>0)) ~> alterRow2",
				"FirstName alterRow(upsertIf(1>0)) ~> alterRow3",
				"derivedColumn1 alterRow(upsertIf(1>0)) ~> alterRow4",
				"castCost alterRow(upsertIf(1>0)) ~> alterRow5",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAirline',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['airline_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDimAirline",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimFilght',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['flight_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDimFlight",
				"alterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimPassenger',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['passenger_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDimPassenger",
				"alterRow4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAirport',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['airport_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDimAirport",
				"alterRow5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'FactBooking',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['booking_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkFactBooking"
			]
		}
	}
}